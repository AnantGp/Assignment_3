{\rtf1\ansi\ansicpg1252\cocoartf2757
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 HelveticaNeue-Bold;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab560
\pard\pardeftab560\slleading20\partightenfactor0

\f0\fs26 \cf0 \

\f1\b\fs48                   ASSIGNMENT 3
\f0\b0\fs26 \
\
1. 
\fs28 JVM, JRE, and JDK
\fs26 :\
   - 
\f1\b JVM (Java Virtual Machine)
\f0\b0 : Think of it as the engine that runs Java programs on your computer. It's responsible for making sure your Java code works, no matter what computer or operating system you're using.\
   - 
\f1\b JRE
\f0\b0  
\f1\b (Java Runtime Environment)
\f0\b0 : This is like a package that includes the JVM and everything else needed to run Java programs. It's for users who want to run Java applications but not develop them.\
   - 
\f1\b JDK
\f0\b0  
\f1\b (Java Development Kit
\f0\b0 ): If you want to write and develop Java programs, you need the JDK. It has the JRE, plus tools to write, compile, and test your Java code.\
\
2. 
\fs28 Platform Independence in Java:\

\fs26 \
   Java is famous for being able to run on any computer. It does this by converting your Java code into a special "language" that any computer can understand. It's like writing a story in a universal language that people from different places can read.\
\
\
3. 
\fs28 How Java Programs are Run by the JVM:\

\fs26 \
   When you write a Java program, it goes through a few steps:\
   - 
\fs28 Compilation
\fs26 : Your code is turned into a special code called bytecode.\
   - 
\fs30 Loading
\fs26 : The JVM loads this bytecode into memory.\
   - 
\fs28 Verification
\fs26 : The JVM checks the code for safety and correctness.\
   - 
\fs28 Execution
\fs26 : The code is either directly understood by the JVM or converted into a form the computer can run.\
   - 
\fs28 Garbage
\fs26  
\fs28 Collection
\fs26 : The JVM keeps things tidy by cleaning up unused stuff.\
\
4. 
\fs30 The Use of "args" in Java:\

\fs26 \
   In Java, when you want your program to take specific information when it starts, you use "args" to collect this information. It's like telling the program, "Hey, I'm giving you these details, and I want you to use them when you run."\
\
5. 
\fs28 Types of Variables in Java:\

\fs26 \
   Java uses different types of variables:\
   - Local Variables: These are like notes you make for yourself within a specific task. Others can't see them.\
   - Instance Variables: These are like notes you share with a group. They are associated with something specific.\
   - Class Variables (Static Variables): These are like notes you put on a bulletin board for everyone to see. They are shared among all instances.\
   - Method Parameters: These are like messages you pass to someone when asking them to do something.\
\
6. Memory Areas Allocated by JVM:\
   When your Java program runs, the JVM arranges its memory in different areas:\
   - Heap: This is where the program stores information about things it's working on.\
   - Method Area: It's like the library of your program, where it keeps books about how everything works.\
   - Stack: Think of it like a to-do list for the program. It keeps track of what the program should do.\
   - PC Register: This is like a bookmark in a book, marking where the program is currently reading.\
   - Native Method Stack: It's like a special place for things that are written in a language other than Java.\
\
7. Just-In-Time Compiler (JIT):\
   The JIT is like having a translator who quickly translates your Java story into a language your computer understands, just before you read it. This makes your Java programs run faster because your computer doesn't need to learn the Java language; it can understand the story directly.\
 }